/*
 * Copyright (c) 2009-2021 jMonkeyEngine
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'jMonkeyEngine' nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package utils.unused

/**
 * Holds the constants for DXGI format defined in DDS file
 *
 * @author Toni Helenius
 */
internal object DXGIFormat {
    const val DXGI_FORMAT_UNKNOWN = 0x00
    const val DXGI_FORMAT_R32G32B32A32_TYPELESS = 0x01
    const val DXGI_FORMAT_R32G32B32A32_FLOAT = 0x02
    const val DXGI_FORMAT_R32G32B32A32_UINT = 0x03
    const val DXGI_FORMAT_R32G32B32A32_SINT = 0x04
    const val DXGI_FORMAT_R32G32B32_TYPELESS = 0x05
    const val DXGI_FORMAT_R32G32B32_FLOAT = 0x06
    const val DXGI_FORMAT_R32G32B32_UINT = 0x07
    const val DXGI_FORMAT_R32G32B32_SINT = 0x08
    const val DXGI_FORMAT_R16G16B16A16_TYPELESS = 0x09
    const val DXGI_FORMAT_R16G16B16A16_FLOAT = 0x0A
    const val DXGI_FORMAT_R16G16B16A16_UNORM = 0x0B
    const val DXGI_FORMAT_R16G16B16A16_UINT = 0x0C
    const val DXGI_FORMAT_R16G16B16A16_SNORM = 0x0D
    const val DXGI_FORMAT_R16G16B16A16_SINT = 0x0E
    const val DXGI_FORMAT_R32G32_TYPELESS = 0x0F
    const val DXGI_FORMAT_R32G32_FLOAT = 0x10
    const val DXGI_FORMAT_R32G32_UINT = 0x11
    const val DXGI_FORMAT_R32G32_SINT = 0x12
    const val DXGI_FORMAT_R32G8X24_TYPELESS = 0x13
    const val DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 0x14
    const val DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x15
    const val DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 0x16
    const val DXGI_FORMAT_R10G10B10A2_TYPELESS = 0x17
    const val DXGI_FORMAT_R10G10B10A2_UNORM = 0x18
    const val DXGI_FORMAT_R10G10B10A2_UINT = 0x19
    const val DXGI_FORMAT_R11G11B10_FLOAT = 0x1A
    const val DXGI_FORMAT_R8G8B8A8_TYPELESS = 0x1B
    const val DXGI_FORMAT_R8G8B8A8_UNORM = 0x1C
    const val DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 0x1D
    const val DXGI_FORMAT_R8G8B8A8_UINT = 0x1E
    const val DXGI_FORMAT_R8G8B8A8_SNORM = 0x1F
    const val DXGI_FORMAT_R8G8B8A8_SINT = 0x20
    const val DXGI_FORMAT_R16G16_TYPELESS = 0x21
    const val DXGI_FORMAT_R16G16_FLOAT = 0x22
    const val DXGI_FORMAT_R16G16_UNORM = 0x23
    const val DXGI_FORMAT_R16G16_UINT = 0x24
    const val DXGI_FORMAT_R16G16_SNORM = 0x25
    const val DXGI_FORMAT_R16G16_SINT = 0x26
    const val DXGI_FORMAT_R32_TYPELESS = 0x27
    const val DXGI_FORMAT_D32_FLOAT = 0x28
    const val DXGI_FORMAT_R32_FLOAT = 0x29
    const val DXGI_FORMAT_R32_UINT = 0x2A
    const val DXGI_FORMAT_R32_SINT = 0x2B
    const val DXGI_FORMAT_R24G8_TYPELESS = 0x2C
    const val DXGI_FORMAT_D24_UNORM_S8_UINT = 0x2D
    const val DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 0x2E
    const val DXGI_FORMAT_X24_TYPELESS_G8_UINT = 0x2F
    const val DXGI_FORMAT_R8G8_TYPELESS = 0x30
    const val DXGI_FORMAT_R8G8_UNORM = 0x31
    const val DXGI_FORMAT_R8G8_UINT = 0x32
    const val DXGI_FORMAT_R8G8_SNORM = 0x33
    const val DXGI_FORMAT_R8G8_SINT = 0x34
    const val DXGI_FORMAT_R16_TYPELESS = 0x35
    const val DXGI_FORMAT_R16_FLOAT = 0x36
    const val DXGI_FORMAT_D16_UNORM = 0x37
    const val DXGI_FORMAT_R16_UNORM = 0x38
    const val DXGI_FORMAT_R16_UINT = 0x39
    const val DXGI_FORMAT_R16_SNORM = 0x3A
    const val DXGI_FORMAT_R16_SINT = 0x3B
    const val DXGI_FORMAT_R8_TYPELESS = 0x3C
    const val DXGI_FORMAT_R8_UNORM = 0x3D
    const val DXGI_FORMAT_R8_UINT = 0x3E
    const val DXGI_FORMAT_R8_SNORM = 0x3F
    const val DXGI_FORMAT_R8_SINT = 0x40
    const val DXGI_FORMAT_A8_UNORM = 0x41
    const val DXGI_FORMAT_R1_UNORM = 0x42
    const val DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 0x43
    const val DXGI_FORMAT_R8G8_B8G8_UNORM = 0x44
    const val DXGI_FORMAT_G8R8_G8B8_UNORM = 0x45
    const val DXGI_FORMAT_BC1_TYPELESS = 0x46
    const val DXGI_FORMAT_BC1_UNORM = 0x47
    const val DXGI_FORMAT_BC1_UNORM_SRGB = 0x48
    const val DXGI_FORMAT_BC2_TYPELESS = 0x49
    const val DXGI_FORMAT_BC2_UNORM = 0x4A
    const val DXGI_FORMAT_BC2_UNORM_SRGB = 0x4B
    const val DXGI_FORMAT_BC3_TYPELESS = 0x4C
    const val DXGI_FORMAT_BC3_UNORM = 0x4D
    const val DXGI_FORMAT_BC3_UNORM_SRGB = 0x4E
    const val DXGI_FORMAT_BC4_TYPELESS = 0x4F
    const val DXGI_FORMAT_BC4_UNORM = 0x50
    const val DXGI_FORMAT_BC4_SNORM = 0x51
    const val DXGI_FORMAT_BC5_TYPELESS = 0x52
    const val DXGI_FORMAT_BC5_UNORM = 0x53
    const val DXGI_FORMAT_BC5_SNORM = 0x54
    const val DXGI_FORMAT_B5G6R5_UNORM = 0x55
    const val DXGI_FORMAT_B5G5R5A1_UNORM = 0x56
    const val DXGI_FORMAT_B8G8R8A8_UNORM = 0x57
    const val DXGI_FORMAT_B8G8R8X8_UNORM = 0x58
    const val DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 0x59
    const val DXGI_FORMAT_B8G8R8A8_TYPELESS = 0x5A
    const val DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 0x5B
    const val DXGI_FORMAT_B8G8R8X8_TYPELESS = 0x5C
    const val DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 0x5D
    const val DXGI_FORMAT_BC6H_TYPELESS = 0x5E
    const val DXGI_FORMAT_BC6H_UF16 = 0x5F
    const val DXGI_FORMAT_BC6H_SF16 = 0x60
    const val DXGI_FORMAT_BC7_TYPELESS = 0x61
    const val DXGI_FORMAT_BC7_UNORM = 0x62
    const val DXGI_FORMAT_BC7_UNORM_SRGB = 0x63
    const val DXGI_FORMAT_AYUV = 0x64
    const val DXGI_FORMAT_Y410 = 0x65
    const val DXGI_FORMAT_Y416 = 0x66
    const val DXGI_FORMAT_NV12 = 0x67
    const val DXGI_FORMAT_P010 = 0x68
    const val DXGI_FORMAT_P016 = 0x69
    const val DXGI_FORMAT_420_OPAQUE = 0x6A
    const val DXGI_FORMAT_YUY2 = 0x6B
    const val DXGI_FORMAT_Y210 = 0x6C
    const val DXGI_FORMAT_Y216 = 0x6D
    const val DXGI_FORMAT_NV11 = 0x6E
    const val DXGI_FORMAT_AI44 = 0x6F
    const val DXGI_FORMAT_IA44 = 0x70
    const val DXGI_FORMAT_P8 = 0x71
    const val DXGI_FORMAT_A8P8 = 0x72
    const val DXGI_FORMAT_B4G4R4A4_UNORM = 0x73
    const val DXGI_FORMAT_P208 = 0x74
    const val DXGI_FORMAT_V208 = 0x75
    const val DXGI_FORMAT_V408 = 0x76
    const val DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 0x77
    const val DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 0x78
    const val DXGI_FORMAT_FORCE_UINT = 0x79
    fun getBitsPerPixel(dxgiFormat: Int): Int {
        return when (dxgiFormat) {
            DXGI_FORMAT_R32G32B32A32_TYPELESS, DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32B32A32_SINT -> 128
            DXGI_FORMAT_R32G32B32_TYPELESS, DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32B32_SINT -> 96
            DXGI_FORMAT_R16G16B16A16_TYPELESS, DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R32G32_TYPELESS, DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, DXGI_FORMAT_X32_TYPELESS_G8X24_UINT -> 64
            DXGI_FORMAT_R10G10B10A2_TYPELESS, DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R11G11B10_FLOAT, DXGI_FORMAT_R8G8B8A8_TYPELESS, DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R16G16_TYPELESS, DXGI_FORMAT_R16G16_FLOAT, DXGI_FORMAT_R16G16_UNORM, DXGI_FORMAT_R16G16_UINT, DXGI_FORMAT_R16G16_SNORM, DXGI_FORMAT_R16G16_SINT, DXGI_FORMAT_R32_TYPELESS, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R24G8_TYPELESS, DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R24_UNORM_X8_TYPELESS, DXGI_FORMAT_X24_TYPELESS_G8_UINT, DXGI_FORMAT_R9G9B9E5_SHAREDEXP, DXGI_FORMAT_R8G8_B8G8_UNORM, DXGI_FORMAT_G8R8_G8B8_UNORM, DXGI_FORMAT_B8G8R8A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, DXGI_FORMAT_B8G8R8A8_TYPELESS, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, DXGI_FORMAT_B8G8R8X8_TYPELESS, DXGI_FORMAT_B8G8R8X8_UNORM_SRGB -> 32

            DXGI_FORMAT_R8G8_TYPELESS, DXGI_FORMAT_R8G8_UNORM, DXGI_FORMAT_R8G8_UINT, DXGI_FORMAT_R8G8_SNORM, DXGI_FORMAT_R8G8_SINT, DXGI_FORMAT_R16_TYPELESS, DXGI_FORMAT_R16_FLOAT, DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16_UNORM, DXGI_FORMAT_R16_UINT, DXGI_FORMAT_R16_SNORM, DXGI_FORMAT_R16_SINT, DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM -> 16
            DXGI_FORMAT_R8_TYPELESS, DXGI_FORMAT_R8_UNORM, DXGI_FORMAT_R8_UINT, DXGI_FORMAT_R8_SNORM, DXGI_FORMAT_R8_SINT, DXGI_FORMAT_A8_UNORM -> 8
            DXGI_FORMAT_R1_UNORM -> 1
            DXGI_FORMAT_BC1_TYPELESS, DXGI_FORMAT_BC1_UNORM, DXGI_FORMAT_BC1_UNORM_SRGB, DXGI_FORMAT_BC4_TYPELESS, DXGI_FORMAT_BC4_UNORM, DXGI_FORMAT_BC4_SNORM -> 4
            DXGI_FORMAT_BC2_TYPELESS, DXGI_FORMAT_BC2_UNORM, DXGI_FORMAT_BC2_UNORM_SRGB, DXGI_FORMAT_BC3_TYPELESS, DXGI_FORMAT_BC3_UNORM, DXGI_FORMAT_BC3_UNORM_SRGB, DXGI_FORMAT_BC5_TYPELESS, DXGI_FORMAT_BC5_UNORM, DXGI_FORMAT_BC5_SNORM, DXGI_FORMAT_BC6H_TYPELESS, DXGI_FORMAT_BC6H_UF16, DXGI_FORMAT_BC6H_SF16, DXGI_FORMAT_BC7_TYPELESS, DXGI_FORMAT_BC7_UNORM, DXGI_FORMAT_BC7_UNORM_SRGB -> 8
            else -> 0
        }
    }

    fun getBlockSize(dxgiFormat: Int): Int {
        when (dxgiFormat) {
            DXGI_FORMAT_BC1_UNORM, DXGI_FORMAT_BC4_UNORM, DXGI_FORMAT_BC4_SNORM -> return 8
        }
        return 16
    }
}